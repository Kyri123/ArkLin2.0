# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build, Deploy and Release App

on: [ push ]

env:
  CI: true
  GITHUB_TOKEN: ${{ secrets.TOKEN }}

jobs:
  test-docker:
    name: "Test and Build as Docker"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 19.x ]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Build Docker Image
        continue-on-error: true
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: user/app:latest
      - name: Archive Test Results
        if: always()


  test-app:
    name: "Test and Build as App"
    needs: test-app

    strategy:
      matrix:
        node-version: [ 19.x ]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: yarn install
      - run: yarn tailwindcss
      - run: yarn BuildServer
      - run: yarn Client

  deploy:
    needs: [ test-app, test-docker ]
    name: "Deploy to Test-Server"
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: ~/KAdmin/ArkLin2.0/sh/update.sh "${{ github.head_ref || github.ref_name }}"

  read-for-release:
    name: "Read and cache Version"
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.version.outputs.out }}
      changelogfile: ${{ steps.changelogfile.outputs.out }}
    steps:
      - uses: actions/checkout@v3
      - id: version
        run: echo "out=$(npx -c 'node -p "process.env.npm_package_version"')" >> $GITHUB_OUTPUT; echo "$(npx -c 'node -p "process.env.npm_package_version"')"
      - id: changelogfile
        run: echo "out=./public/versions/$(npx -c 'node -p "process.env.npm_package_version"').md" >> $GITHUB_OUTPUT; echo "$(npx -c 'node -p "process.env.npm_package_version"')"

  release:
    name: "Create release if Tag not exists"
    needs: read-for-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: "Check Version"
        uses: mukunku/tag-exists-action@v1.2.0
        id: checkTag
        with:
          tag: '${{ needs.read-for-release.outputs.version }}'

      - name: "Release!"
        if: ${{ steps.checkTag.outputs.exists == 'false' }}
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "${{ needs.read-for-release.outputs.version }}"
          release_name: "Release ${{ needs.read-for-release.outputs.version }}-build.${{ github.run_number }}"
          body_path: "${{ needs.read-for-release.outputs.changelogfile }}"
          draft: false
          prerelease: false

      - name: "No Release"
        if: ${{ steps.checkTag.outputs.exists == 'true' }}
        run: echo "Release canceled. Tag exsists."
