# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build And Deploy

on: [ push ]

jobs:
  test:
    name: "Test and Build"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 18.x, 19.x ]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: yarn install
      - run: yarn TestApp
      - run: yarn BuildServer
      - run: yarn Client


  deploy:
    needs: test
    name: "Deploy to Server"
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: cd ~/home/steam/KAdmin/kadmin-arklin2/; docker compose down; git stash; git pull; docker compose up -d --build


  release:
    name: "Check for release exsists"
    needs: deplay
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - name: "Read NPM version"
        env:
          NPM_VERSION: $(npx -c 'node -p "process.env.npm_package_version"')

      - name: "Read Changelog"
        env:
          CHANGELOG: $(cat ./public/changelog/${{ env.NPM_VERSION }}.md)

      - name: "Check Version"
        uses: mukunku/tag-exists-action@v1.2.0
        id: checkTag
        with:
          tag: '${{ env.NPM_VERSION }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Do a Release" 
        if: ${{ steps.checkTag.outputs.exists == "true" }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NPM_VERSION }}
          release_name: Release ${{ env.NPM_VERSION }}
          body: ${{ env.CHANGELOG }}
          draft: false
          prerelease: false

      - name: "No Release"
        if: ${{ steps.checkTag.outputs.exists == "false" }}
        run: echo "Release canceled. Tag exsists."
